diff --git a/src/dnsmasq.c b/src/dnsmasq.c
index 7fd33af..734fdf8 100644
--- a/src/dnsmasq.c
+++ b/src/dnsmasq.c
@@ -87,9 +87,42 @@ int main (int argc, char **argv)
   umask(022); /* known umask, create leases and pid files as 0644 */
  
   rand_init(); /* Must precede read_opts() */
-  
+
+
+  /* Close any file descriptors we inherited apart from std{in|out|err}
+
+     Ensure that at least stdin, stdout and stderr (fd 0, 1, 2) exist,
+     otherwise file descriptors we create can end up being 0, 1, or 2
+     and then get accidentally closed later when we make 0, 1, and 2
+     open to /dev/null. Normally we'll be started with 0, 1 and 2 open,
+     but it's not guaranteed. By opening /dev/null three times, we
+     ensure that we're not using those fds for real stuff. */
+  for (i = 0; i < max_fd; i++)
+    if (i != STDOUT_FILENO && i != STDERR_FILENO && i != STDIN_FILENO)
+      close(i);
+    else
+      open("/dev/null", O_RDWR);
+
+
+
+  /* Use a pipe to carry signals and other events back to the event loop
+     in a race-free manner and another to carry errors to daemon-invoking process */
+  safe_pipe(pipefd, 1);
+
+  piperead = pipefd[0];
+  pipewrite = pipefd[1];
+  /* prime the pipe to load stuff first time. */
+  send_event(pipewrite, EVENT_INIT, 0, NULL);
+
+  err_pipe[1] = -1;
+
   read_opts(argc, argv, compile_opts);
- 
+
+#ifdef HAVE_LUASCRIPT
+  char **options = fetch_dynamic_config(pipewrite, err_pipe[1]);
+  apply_opts(options);
+#endif
+
   if (daemon->edns_pktsz < PACKETSZ)
     daemon->edns_pktsz = PACKETSZ;
 
@@ -134,20 +167,6 @@ int main (int argc, char **argv)
     }
 #endif
   
-  /* Close any file descriptors we inherited apart from std{in|out|err} 
-     
-     Ensure that at least stdin, stdout and stderr (fd 0, 1, 2) exist,
-     otherwise file descriptors we create can end up being 0, 1, or 2 
-     and then get accidentally closed later when we make 0, 1, and 2 
-     open to /dev/null. Normally we'll be started with 0, 1 and 2 open, 
-     but it's not guaranteed. By opening /dev/null three times, we 
-     ensure that we're not using those fds for real stuff. */
-  for (i = 0; i < max_fd; i++)
-    if (i != STDOUT_FILENO && i != STDERR_FILENO && i != STDIN_FILENO)
-      close(i);
-    else
-      open("/dev/null", O_RDWR); 
-
 #ifndef HAVE_LINUX_NETWORK
 #  if !(defined(IP_RECVDSTADDR) && defined(IP_RECVIF) && defined(IP_SENDSRCADDR))
   if (!option_bool(OPT_NOWILD))
@@ -465,17 +484,6 @@ int main (int argc, char **argv)
       memset(data, 0, sizeof(*data) * capsize);
     }
 #endif
-
-  /* Use a pipe to carry signals and other events back to the event loop 
-     in a race-free manner and another to carry errors to daemon-invoking process */
-  safe_pipe(pipefd, 1);
-  
-  piperead = pipefd[0];
-  pipewrite = pipefd[1];
-  /* prime the pipe to load stuff first time. */
-  send_event(pipewrite, EVENT_INIT, 0, NULL); 
-
-  err_pipe[1] = -1;
   
   if (!option_bool(OPT_DEBUG))   
     {
diff --git a/src/dnsmasq.h b/src/dnsmasq.h
index f53e9a5..be3304a 100644
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -952,6 +952,15 @@ struct tftp_file {
   char filename[];
 };
 
+struct tftp_content {
+  off_t size;
+  char *data;
+};
+
+#define TFTP_TRANSFER_TYPE_NONE 0x0
+#define TFTP_TRANSFER_TYPE_FILE (1u<<0)
+#define TFTP_TRANSFER_TYPE_CONTENT (1u<<1)
+
 struct tftp_transfer {
   int sockfd;
   time_t timeout;
@@ -960,7 +969,11 @@ struct tftp_transfer {
   off_t offset;
   union mysockaddr peer;
   char opt_blocksize, opt_transize, netascii, carrylf;
-  struct tftp_file *file;
+  int transfer_type;
+  union {
+    struct tftp_file *file;
+    struct tftp_content *content;
+  } meta_file;
   struct tftp_transfer *next;
 };
 
@@ -1297,6 +1310,7 @@ void flush_log(void);
 
 /* option.c */
 void read_opts (int argc, char **argv, char *compile_opts);
+void apply_opts(char **options);
 char *option_string(int prot, unsigned int opt, unsigned char *val, 
 		    int opt_len, char *buf, int buf_len);
 void reread_dhcp(void);
@@ -1492,6 +1506,13 @@ void queue_tftp(off_t file_len, char *filename, union mysockaddr *peer);
 void queue_arp(int action, unsigned char *mac, int maclen,
 	       int family, struct all_addr *addr);
 int helper_buf_empty(void);
+#ifdef HAVE_LUASCRIPT
+
+char **fetch_dynamic_config(int event_fd, int err_fd);
+unsigned int notify_tftp_lookup(char **filename, union mysockaddr *peer, union mysockaddr *addr);
+void notify_tftp_lookup_free();
+void notify_tftp_error(char *filename, union mysockaddr *peer, union mysockaddr *addr);
+#endif
 #endif
 
 /* tftp.c */
diff --git a/src/helper.c b/src/helper.c
index c134071..09a935f 100644
--- a/src/helper.c
+++ b/src/helper.c
@@ -32,20 +32,27 @@
 
 static void my_setenv(const char *name, const char *value, int *error);
 static unsigned char *grab_extradata(unsigned char *buf, unsigned char *end,  char *env, int *err);
+static void stringify_hwaddr(unsigned char *hwaddr, int hwaddr_type, int hwaddr_len);
+static void stringify_clid(unsigned char *clid, int clid_len);
 
 #ifdef HAVE_LUASCRIPT
 #define LUA_COMPAT_ALL
-#include <lua.h>  
-#include <lualib.h>  
-#include <lauxlib.h>  
+#include <lua.h>
+#include <lualib.h>
+#include <lauxlib.h>
 
 #ifndef lua_open
 #define lua_open()     luaL_newstate()
 #endif
 
-lua_State *lua;
+#if LUA_VERSION_NUM < 520
+#define lua_rawlen(L,i) lua_objlen(L,i)
+#endif
+
+lua_State *lua = NULL;
 
 static unsigned char *grab_extradata_lua(unsigned char *buf, unsigned char *end, char *field);
+static void lua_push_lease_info(struct dhcp_lease *lease);
 #endif
 
 
@@ -77,6 +84,263 @@ struct script_data
 static struct script_data *buf = NULL;
 static size_t bytes_in_buf = 0, buf_size = 0;
 
+static void stringify_hwaddr(unsigned char *hwaddr, int hwaddr_type, int hwaddr_len)
+{
+  char *p = daemon->dhcp_buff;
+  int i;
+
+  if (hwaddr_type != ARPHRD_ETHER || hwaddr_len == 0)
+    p += sprintf(p, "%.2x-", hwaddr_type);
+
+  for (i = 0; (i < hwaddr_len) && (i < DHCP_CHADDR_MAX); i++)
+   {
+     p += sprintf(p, "%.2x", hwaddr[i]);
+     if (i != hwaddr_len - 1)
+       p += sprintf(p, ":");
+   }
+}
+
+static void stringify_clid(unsigned char *clid, int clid_len)
+{
+  char *p = daemon->packet;
+  int i = 0;
+
+  for (i = 0; i < clid_len; i++)
+    {
+      p += sprintf(p, "%.2x", clid[i]);
+      if (i != clid_len - 1)
+        p += sprintf(p, ":");
+    }
+}
+
+#ifdef HAVE_LUASCRIPT
+static void lua_create_context(int event_fd, int err_fd)
+{
+  if (daemon->luascript && !lua)
+  {
+    const char *lua_err = NULL;
+    lua = lua_open();
+    luaL_openlibs(lua);
+
+    /* get Lua to load our script file */
+    if (luaL_dofile(lua, daemon->luascript) != 0)
+      lua_err = lua_tostring(lua, -1);
+    else
+      {
+        lua_getglobal(lua, "lease");
+        if (lua_type(lua, -1) != LUA_TFUNCTION)
+          lua_err = _("lease() function missing in Lua script");
+      }
+
+    if (lua_err)
+      {
+        printf("LUA ERR %s\n", lua_err);
+        if (option_bool(OPT_NO_FORK) || option_bool(OPT_DEBUG))
+          /* send error to daemon process if no-fork */
+          send_event(event_fd, EVENT_LUA_ERR, 0, (char *)lua_err);
+        else
+          {
+            /* kill daemon */
+            send_event(event_fd, EVENT_DIE, 0, NULL);
+            /* return error */
+            send_event(err_fd, EVENT_LUA_ERR, 0, (char *)lua_err);
+          }
+        _exit(0);
+      }
+  }
+}
+
+char **fetch_dynamic_config(int event_fd, int err_fd)
+{
+  if (daemon->luascript)
+    {
+      lua_create_context(event_fd, err_fd);
+
+      lua_getglobal(lua, "configure");
+      if (lua_type(lua, -1) == LUA_TFUNCTION)
+        {
+          /* be careful, use proper stack index when multiple values exist */
+          int before = lua_gettop(lua);
+          lua_call(lua, 0, 1);
+          int top = lua_gettop(lua);
+
+          if (top >= 1 && lua_type(lua, before) == LUA_TTABLE)
+           {
+             const int len = lua_rawlen(lua, top - before);
+
+             int idx;
+
+             char** ret = malloc((len+1) * sizeof(char*));
+
+             ret[len] = NULL;
+
+             for (idx = 1; idx <= len; idx++)
+               {
+                 lua_rawgeti(lua, top - before - 1, idx );
+                 const char *str = lua_tostring(lua, -1);
+                 ret[idx-1] = strdup(str);
+                 lua_pop(lua, 1);
+               }
+
+             return ret;
+           }
+        }
+    }
+
+    return NULL;
+}
+
+void lua_push_lease_info(struct dhcp_lease *lease)
+{
+  if (!lease)
+    return;
+
+  lua_newtable(lua);
+
+  lua_pushstring(lua, lease->hostname);
+  lua_setfield(lua, -2, "hostname");
+
+  lua_pushstring(lua, lease->fqdn);
+  lua_setfield(lua, -2, "fqdn");
+
+  stringify_hwaddr(lease->hwaddr, lease->hwaddr_type, lease->hwaddr_len*2);
+  lua_pushlstring(lua, daemon->dhcp_buff, lease->hwaddr_len*2 + lease->hwaddr_len - 1);
+  lua_setfield(lua, -2, "mac_address");
+
+  if (lease->clid)
+    {
+      stringify_clid(lease->clid, lease->clid_len);
+      lua_pushlstring(lua, daemon->packet, lease->clid_len*2 + lease->clid_len - 1);
+    }
+  else
+    lua_pushnil(lua);
+
+  lua_setfield(lua, -2, "client");
+
+  lua_pushnumber(lua, lease->expires);
+  lua_setfield(lua, -2, "expires");
+
+  lua_pushstring(lua, inet_ntoa(lease->addr));
+  lua_setfield(lua, -2, "ip_address");
+
+  time_t now = dnsmasq_time();
+  lua_pushnumber(lua, (unsigned int)difftime(lease->expires, now));
+  lua_setfield(lua, -2, "remaining_time");
+
+#ifdef HAVE_DHCP6
+  lua_pushstring(lua, inet_ntop(AF_INET6, &lease->addr6, daemon->addrbuff, ADDRSTRLEN));
+  lua_setfield(lua, -2, "addr6");
+#endif
+
+#ifdef HAVE_BROKEN_RTC
+  lua_pushnumber(lua, lease->length);
+  lua_setfield(lua, -2, "lease_length");
+#else
+   lua_pushnumber(lua, lease->expires);
+   lua_setfield(lua, -2, "lease_expires");
+#endif
+
+  lua_setfield(lua, -2, "lease");
+}
+
+/* Allow Lua to modify the tftp request */
+unsigned int notify_tftp_lookup(char **filename, union mysockaddr *peer, union mysockaddr *addr)
+{
+  if (daemon->luascript)
+    {
+      lua_getglobal(lua, "tftp_lookup");
+
+      if (lua_type(lua, -1) != LUA_TFUNCTION)
+        {
+          lua_pop(lua, 1); /* tftp function optional */
+          return TFTP_TRANSFER_TYPE_FILE;
+        }
+
+      lua_pushstring(lua, (char*) *filename);
+      lua_newtable(lua);
+
+      if (peer->sa.sa_family == AF_INET)
+        {
+          prettyprint_addr(peer, daemon->addrbuff);
+          lua_pushstring(lua, daemon->addrbuff);
+          lua_setfield(lua, -2, "peer_address");
+
+          lua_push_lease_info(lease_find_by_addr(peer->in.sin_addr));
+        }
+
+      if (addr && addr->sa.sa_family == AF_INET)
+        {
+          prettyprint_addr(addr, daemon->addrbuff);
+          lua_pushstring(lua, daemon->addrbuff);
+          lua_setfield(lua, -2, "addr_address");
+        }
+
+      printf("BEGIN LOOK\n");
+      sync();
+      lua_call(lua, 2, 2);
+      printf("END LOOK\n");
+      sync();
+
+
+      /* -2 because the function and 2 args are on the stack */
+      if (lua_type(lua, -2) == LUA_TSTRING && lua_type(lua, -1) == LUA_TBOOLEAN)
+        {
+          /* -2 is either the modified path or raw (bytes) content */
+          (*filename) = (char*) lua_tostring(lua, -2);
+
+          /* If true, -1 means -2 is raw content, false means it's a path. */
+          return lua_toboolean(lua, -1) ? TFTP_TRANSFER_TYPE_CONTENT : TFTP_TRANSFER_TYPE_FILE;
+        }
+      else
+        return TFTP_TRANSFER_TYPE_NONE;
+    }
+
+  return TFTP_TRANSFER_TYPE_FILE;
+}
+
+/* Notify Lua when a tftp request fails */
+void notify_tftp_error(char *filename, union mysockaddr *peer, union mysockaddr *addr)
+{
+  if (daemon->luascript && filename)
+    {
+      lua_getglobal(lua, "tftp_error");
+
+      if (lua_type(lua, -1) != LUA_TFUNCTION)
+        {
+          lua_pop(lua, 1); /* tftp function optional */
+          return;
+        }
+
+      lua_pushstring(lua, filename);
+      lua_newtable(lua);
+
+      if (peer->sa.sa_family == AF_INET)
+        {
+          prettyprint_addr(peer, daemon->addrbuff);
+          lua_pushstring(lua, daemon->addrbuff);
+          lua_setfield(lua, -2, "peer_address");
+        }
+
+      if (addr->sa.sa_family == AF_INET)
+        {
+          prettyprint_addr(addr, daemon->addrbuff);
+          lua_pushstring(lua, daemon->addrbuff);
+          lua_setfield(lua, -2, "addr_address");
+        }
+
+
+      lua_call(lua, 2, 0);
+    }
+}
+
+void notify_tftp_lookup_free()
+{
+  lua_pop(lua, 1);
+  lua_pop(lua, 1);
+}
+
+#endif
+
 int create_helper(int event_fd, int err_fd, uid_t uid, gid_t gid, long max_fd)
 {
   pid_t pid;
@@ -140,35 +404,8 @@ int create_helper(int event_fd, int err_fd, uid_t uid, gid_t gid, long max_fd)
 #ifdef HAVE_LUASCRIPT
   if (daemon->luascript)
     {
-      const char *lua_err = NULL;
-      lua = lua_open();
-      luaL_openlibs(lua);
-      
-      /* get Lua to load our script file */
-      if (luaL_dofile(lua, daemon->luascript) != 0)
-	lua_err = lua_tostring(lua, -1);
-      else
-	{
-	  lua_getglobal(lua, "lease");
-	  if (lua_type(lua, -1) != LUA_TFUNCTION) 
-	    lua_err = _("lease() function missing in Lua script");
-	}
-      
-      if (lua_err)
-	{
-	  if (option_bool(OPT_NO_FORK) || option_bool(OPT_DEBUG))
-	    /* send error to daemon process if no-fork */
-	    send_event(event_fd, EVENT_LUA_ERR, 0, (char *)lua_err);
-	  else
-	    {
-	      /* kill daemon */
-	      send_event(event_fd, EVENT_DIE, 0, NULL);
-	      /* return error */
-	      send_event(err_fd, EVENT_LUA_ERR, 0, (char *)lua_err);
-	    }
-	  _exit(0);
-	}
-      
+      lua_create_context(event_fd, err_fd);
+
       lua_pop(lua, 1);  /* remove nil from stack */
       lua_getglobal(lua, "init");
       if (lua_type(lua, -1) == LUA_TFUNCTION)
@@ -237,15 +474,7 @@ int create_helper(int event_fd, int err_fd, uid_t uid, gid_t gid, long max_fd)
 
       	
       /* stringify MAC into dhcp_buff */
-      p = daemon->dhcp_buff;
-      if (data.hwaddr_type != ARPHRD_ETHER || data.hwaddr_len == 0) 
-	p += sprintf(p, "%.2x-", data.hwaddr_type);
-      for (i = 0; (i < data.hwaddr_len) && (i < DHCP_CHADDR_MAX); i++)
-	{
-	  p += sprintf(p, "%.2x", data.hwaddr[i]);
-	  if (i != data.hwaddr_len - 1)
-	    p += sprintf(p, ":");
-	}
+      stringify_hwaddr(data.hwaddr, data.hwaddr_type, data.hwaddr_len);
       
       /* supplied data may just exceed normal buffer (unlikely) */
       if ((data.hostname_len + data.ed_len + data.clid_len) > MAXDNAME && 
@@ -257,12 +486,7 @@ int create_helper(int event_fd, int err_fd, uid_t uid, gid_t gid, long max_fd)
 	continue;
 
       /* CLID into packet */
-      for (p = daemon->packet, i = 0; i < data.clid_len; i++)
-	{
-	  p += sprintf(p, "%.2x", buf[i]);
-	  if (i != data.clid_len - 1) 
-	      p += sprintf(p, ":");
-	}
+      stringify_clid(buf, data.clid_len);
 
 #ifdef HAVE_DHCP6
       if (is6)
@@ -465,7 +689,12 @@ int create_helper(int event_fd, int err_fd, uid_t uid, gid_t gid, long max_fd)
 	      lua_pushstring(lua, daemon->addrbuff);
 	      lua_setfield(lua, -2, "ip_address");
 	    
+              printf("BEGIN LEASE\n");
+              sync();
 	      lua_call(lua, 2, 0);	/* pass 2 values, expect 0 */
+              printf("END LLEASE\n");
+              sync();
+
 	    }
 	}
 #endif
diff --git a/src/option.c b/src/option.c
index 44b1dc5..a68a240 100644
--- a/src/option.c
+++ b/src/option.c
@@ -4719,6 +4719,45 @@ void reread_dhcp(void)
 }
 #endif
 
+void apply_opts(char **options)
+{
+  char **arr = options;
+
+  for (; options && options[0]; options++)
+    {
+      char *errmess, *arg;
+      int i = 0;
+      errmess = NULL;
+
+      for (;opts[i].name; i++)
+        {
+          const int len = strlen(opts[i].name);
+          if (strncmp(opts[i].name, options[0], len) == 0)
+            {
+              arg = options[0][len] == '=' ? &options[0][len+1] : NULL;
+              break;
+            }
+        }
+
+      if (!i)
+        errmess = _("bad option");
+      else if (opts[i].has_arg == 0 && arg)
+        errmess = _("extraneous parameter");
+      else if (opts[i].has_arg == 1 && !arg)
+        errmess = _("missing parameter");
+
+      if (errmess || !one_opt(opts[i].val, arg, daemon->namebuff, _("error"), 0, 0))
+      {
+        sprintf(daemon->namebuff + strlen(daemon->namebuff), _(" for %s %s"), opts[i].name, errmess);
+        die("%s", daemon->namebuff, EC_BADCONF);
+      }
+
+      free(options[0]);
+    }
+
+  free(arr);
+}
+
 void read_opts(int argc, char **argv, char *compile_opts)
 {
   size_t argbuf_size = MAXDNAME;
diff --git a/src/tftp.c b/src/tftp.c
index f2eccbc..876216c 100644
--- a/src/tftp.c
+++ b/src/tftp.c
@@ -22,10 +22,16 @@ static struct tftp_file *check_tftp_fileperm(ssize_t *len, char *prefix);
 static void free_transfer(struct tftp_transfer *transfer);
 static ssize_t tftp_err(int err, char *packet, char *message, char *file);
 static ssize_t tftp_err_oops(char *packet, char *file);
+static ssize_t add_ack_mess(char *packet, struct tftp_transfer *transfer, unsigned int t_size);
 static ssize_t get_block(char *packet, struct tftp_transfer *transfer);
 static char *next(char **p, char *end);
 static void sanitise(char *buf);
 
+#ifdef HAVE_LUASCRIPT
+static void tftp_init_content(char *content, char *packet, struct tftp_transfer *transfer);
+static ssize_t tftp_send_content(char *packet, struct tftp_transfer *transfer);
+#endif
+
 #define OP_RRQ  1
 #define OP_WRQ  2
 #define OP_DATA 3
@@ -289,7 +295,8 @@ void tftp_request(struct listener *listen, time_t now)
   transfer->block = 1;
   transfer->blocksize = 512;
   transfer->offset = 0;
-  transfer->file = NULL;
+  transfer->meta_file.file = NULL;
+  transfer->transfer_type = TFTP_TRANSFER_TYPE_NONE;
   transfer->opt_blocksize = transfer->opt_transize = 0;
   transfer->netascii = transfer->carrylf = 0;
  
@@ -366,13 +373,24 @@ void tftp_request(struct listener *listen, time_t now)
 	    }
 	}
 
+#ifdef HAVE_LUASCRIPT
+      unsigned int transfer_type = notify_tftp_lookup(&filename, &peer, &addr);
+
+      /* Assume `filetype` is the actual content (ex: for dynamic PXE menus) */
+      if (transfer_type == TFTP_TRANSFER_TYPE_CONTENT)
+        {
+          tftp_init_content(filename, packet, transfer);
+          return;
+        }
+#endif
+
       /* cope with backslashes from windows boxen. */
       for (p = filename; *p; p++)
 	if (*p == '\\')
 	  *p = '/';
 	else if (option_bool(OPT_TFTP_LC))
 	  *p = tolower(*p);
-		
+
       strcpy(daemon->namebuff, "/");
       if (prefix)
 	{
@@ -442,13 +460,23 @@ void tftp_request(struct listener *listen, time_t now)
       strncat(daemon->namebuff, filename, (MAXDNAME-1) - strlen(daemon->namebuff));
       
       /* check permissions and open file */
-      if ((transfer->file = check_tftp_fileperm(&len, prefix)))
+      if ((transfer->meta_file.file = check_tftp_fileperm(&len, prefix)))
 	{
+          transfer->transfer_type = TFTP_TRANSFER_TYPE_FILE;
+
 	  if ((len = get_block(packet, transfer)) == -1)
 	    len = tftp_err_oops(packet, daemon->namebuff);
 	  else
 	    is_err = 0;
 	}
+      else
+	{
+#ifdef HAVE_LUASCRIPT
+	    notify_tftp_error(daemon->namebuff, &peer, &addr);
+#endif
+
+	}
+
     }
   
   while (sendto(transfer->sockfd, packet, len, 0, 
@@ -509,13 +537,14 @@ static struct tftp_file *check_tftp_fileperm(ssize_t *len, char *prefix)
      Be conservative and only share when inode and name match
      this keeps error messages sane. */
   for (t = daemon->tftp_trans; t; t = t->next)
-    if (t->file->dev == statbuf.st_dev && 
-	t->file->inode == statbuf.st_ino &&
-	strcmp(t->file->filename, namebuff) == 0)
+    if (t->transfer_type == TFTP_TRANSFER_TYPE_FILE &&
+        t->meta_file.file->dev == statbuf.st_dev &&
+	t->meta_file.file->inode == statbuf.st_ino &&
+	strcmp(t->meta_file.file->filename, namebuff) == 0)
       {
 	close(fd);
-	t->file->refcount++;
-	return t->file;
+	t->meta_file.file->refcount++;
+	return t->meta_file.file;
       }
   
   if (!(file = whine_malloc(sizeof(struct tftp_file) + strlen(namebuff) + 1)))
@@ -609,10 +638,18 @@ void check_tftp_listeners(time_t now)
 	  	  
 	  /* we overwrote the buffer... */
 	  daemon->srv_save = NULL;
-	 
-	  if ((len = get_block(daemon->packet, transfer)) == -1)
+
+
+          /* Assume `filetype` is the actual content (ex: for dynamic PXE menus) */
+          if (transfer->transfer_type == TFTP_TRANSFER_TYPE_CONTENT)
+            {
+#ifdef HAVE_LUASCRIPT
+              tftp_send_content(daemon->packet, transfer);
+#endif
+            }
+          else if ((len = get_block(daemon->packet, transfer)) == -1)
 	    {
-	      len = tftp_err_oops(daemon->packet, transfer->file->filename);
+	      len = tftp_err_oops(daemon->packet, transfer->meta_file.file->filename);
 	      endcon = 1;
 	    }
 	  /* don't complain about timeout when we're awaiting the last
@@ -629,7 +666,7 @@ void check_tftp_listeners(time_t now)
 	  
 	  if (endcon || len == 0)
 	    {
-	      strcpy(daemon->namebuff, transfer->file->filename);
+	      strcpy(daemon->namebuff, transfer->meta_file.file->filename);
 	      sanitise(daemon->namebuff);
 	      my_syslog(MS_TFTP | LOG_INFO, endcon ? _("failed sending %s to %s") : _("sent %s to %s"), daemon->namebuff, daemon->addrbuff);
 	      /* unlink */
@@ -653,10 +690,18 @@ void check_tftp_listeners(time_t now)
 static void free_transfer(struct tftp_transfer *transfer)
 {
   close(transfer->sockfd);
-  if (transfer->file && (--transfer->file->refcount) == 0)
+  if (transfer->transfer_type == TFTP_TRANSFER_TYPE_FILE &&
+    transfer->meta_file.file && (--transfer->meta_file.file->refcount) == 0)
+    {
+      close(transfer->meta_file.file->fd);
+      free(transfer->meta_file.file);
+    }
+  else if (transfer->transfer_type == TFTP_TRANSFER_TYPE_CONTENT
+    && transfer->meta_file.content)
     {
-      close(transfer->file->fd);
-      free(transfer->file);
+      if (transfer->meta_file.content->data)
+        free(transfer->meta_file.content->data);
+      free(transfer->meta_file.content);
     }
   free(transfer);
 }
@@ -715,6 +760,107 @@ static ssize_t tftp_err_oops(char *packet, char *file)
   return tftp_err(ERR_NOTDEF, packet, _("cannot read %s: %s"), daemon->namebuff);
 }
 
+static ssize_t add_ack_mess(char *packet, struct tftp_transfer *transfer, unsigned int t_size)
+{
+  /* send OACK */
+  char *p;
+  struct oackmess {
+    unsigned short op;
+    char data[];
+  } *mess = (struct oackmess *)packet;
+
+  p = mess->data;
+  mess->op = htons(OP_OACK);
+  if (transfer->opt_blocksize)
+    {
+      p += (sprintf(p, "blksize") + 1);
+      p += (sprintf(p, "%u", transfer->blocksize) + 1);
+    }
+
+  if (transfer->opt_transize)
+    {
+      p += (sprintf(p,"tsize") + 1);
+      p += (sprintf(p, "%u", t_size) + 1);
+    }
+
+  return p - packet;
+}
+
+#ifdef HAVE_LUASCRIPT
+static void tftp_init_content(char *content, char *packet, struct tftp_transfer *transfer)
+{
+  ssize_t len = strlen(content);
+
+  transfer->transfer_type = TFTP_TRANSFER_TYPE_CONTENT;
+  transfer->meta_file.content = NULL;
+
+  if (!(transfer->meta_file.content = whine_malloc(sizeof(struct tftp_content))))
+    {
+      free_transfer(transfer);
+      return;
+    }
+
+  transfer->meta_file.content->size = len;
+  transfer->meta_file.content->data = NULL;
+
+  if (!(transfer->meta_file.content->data = whine_malloc(len + 1)))
+    {
+      free_transfer(transfer);
+      return;
+    }
+
+  /* In theory, it's possible to avoid this copy by leaving the
+   * data on the Lua stack. However it requires a lot more code
+   * to track the Lua stack content. If someone wants to save
+   * those memory bits: Patches welcome.
+   */
+  safe_strncpy(transfer->meta_file.content->data, content, len);
+
+  notify_tftp_lookup_free();
+
+  memset(packet, 0, daemon->packet_buff_sz);
+  const ssize_t ack_size = add_ack_mess(packet, transfer, ((unsigned int)len) + 1);
+
+  while(sendto(transfer->sockfd, packet, ack_size, 0,
+    (struct sockaddr *)&transfer->peer, sa_len(&transfer->peer)) == -1 && errno == EINTR);
+
+  transfer->next = daemon->tftp_trans;
+  daemon->tftp_trans = transfer;
+
+  return;
+}
+
+static ssize_t tftp_send_content(char *packet, struct tftp_transfer *transfer)
+{
+  /* send data packet */
+  struct datamess {
+    unsigned short op, block;
+    unsigned char data[];
+  } *mess = (struct datamess *)packet;
+
+  const size_t overhead = sizeof(unsigned short)*2;
+  size_t size = transfer->meta_file.content->size - transfer->offset;
+
+  if (transfer->offset > transfer->meta_file.content->size)
+    return 0; /* finished */
+
+  if (size > transfer->blocksize)
+    size = transfer->blocksize;
+
+  mess->op = htons(OP_DATA);
+  mess->block = htons((unsigned short)(transfer->block));
+
+  memcpy(mess->data, transfer->meta_file.content->data + transfer->offset, size);
+
+  while(sendto(transfer->sockfd, packet, size + overhead, 0,
+   (struct sockaddr *)&transfer->peer, sa_len(&transfer->peer)) == -1 && errno == EINTR);
+
+  transfer->expansion = 0;
+
+  return size + 4;
+}
+#endif
+
 /* return -1 for error, zero for done. */
 static ssize_t get_block(char *packet, struct tftp_transfer *transfer)
 {
@@ -722,27 +868,7 @@ static ssize_t get_block(char *packet, struct tftp_transfer *transfer)
   
   if (transfer->block == 0)
     {
-      /* send OACK */
-      char *p;
-      struct oackmess {
-	unsigned short op;
-	char data[];
-      } *mess = (struct oackmess *)packet;
-      
-      p = mess->data;
-      mess->op = htons(OP_OACK);
-      if (transfer->opt_blocksize)
-	{
-	  p += (sprintf(p, "blksize") + 1);
-	  p += (sprintf(p, "%u", transfer->blocksize) + 1);
-	}
-      if (transfer->opt_transize)
-	{
-	  p += (sprintf(p,"tsize") + 1);
-	  p += (sprintf(p, "%u", (unsigned int)transfer->file->size) + 1);
-	}
-
-      return p - packet;
+      return add_ack_mess(packet, transfer, ((unsigned int)transfer->meta_file.file->size) + 1);
     }
   else
     {
@@ -752,9 +878,9 @@ static ssize_t get_block(char *packet, struct tftp_transfer *transfer)
 	unsigned char data[];
       } *mess = (struct datamess *)packet;
       
-      size_t size = transfer->file->size - transfer->offset; 
+      size_t size = transfer->meta_file.file->size - transfer->offset;
       
-      if (transfer->offset > transfer->file->size)
+      if (transfer->offset > transfer->meta_file.file->size)
 	return 0; /* finished */
       
       if (size > transfer->blocksize)
@@ -763,8 +889,8 @@ static ssize_t get_block(char *packet, struct tftp_transfer *transfer)
       mess->op = htons(OP_DATA);
       mess->block = htons((unsigned short)(transfer->block));
       
-      if (lseek(transfer->file->fd, transfer->offset, SEEK_SET) == (off_t)-1 ||
-	  !read_write(transfer->file->fd, mess->data, size, 1))
+      if (lseek(transfer->meta_file.file->fd, transfer->offset, SEEK_SET) == (off_t)-1 ||
+	  !read_write(transfer->meta_file.file->fd, mess->data, size, 1))
 	return -1;
       
       transfer->expansion = 0;
@@ -804,11 +930,11 @@ int do_tftp_script_run(void)
 {
   struct tftp_transfer *transfer;
 
-  if ((transfer = daemon->tftp_done_trans))
+  if ((transfer = daemon->tftp_done_trans) && transfer->transfer_type == TFTP_TRANSFER_TYPE_FILE)
     {
       daemon->tftp_done_trans = transfer->next;
 #ifdef HAVE_SCRIPT
-      queue_tftp(transfer->file->size, transfer->file->filename, &transfer->peer);
+      queue_tftp(transfer->meta_file.file->size, transfer->meta_file.file->filename, &transfer->peer);
 #endif
       free_transfer(transfer);
       return 1;
